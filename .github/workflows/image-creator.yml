name: blockchain-analyzer Build and Deploy manifest.

on: # Trigger the workflow on push to the main branch when changes to the src, .github folders and Dockerfile. 
  push:
    paths:
      - src/**
      - .github/**
      - Dockerfile
    branches:
      - main 

jobs:
  # get_version:  # Stage 1 - Gets the version of the latest Git repo tag and updates with new version. 
  #   runs-on: 
  #     - codebuild-GithubActionRunner-${{ github.run_id }}-${{ github.run_attempt }}
    
  #   outputs:
  #     image_tag: ${{ steps.increment-git-tag.outputs.git-tag }}
    
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
      
  #     - name: Automatic Tagging of Releases
  #       id: increment-git-tag
  #       run: |
  #         bash ./build/version_update.sh -v minor


  safety:
    runs-on:
      - codebuild-GithubActionRunner-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.18'  # Adjust to your needs

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Safety
        run: pip install safety

      - name: Run Safety check
        run: |
          safety check --full-report --continue-on-error

  # build_and_push:  # Stage 2 - Builds the Image using the Dockerfile and pushes to ECR.
  #   runs-on: 
  #     - codebuild-GithubActionRunner-${{ github.run_id }}-${{ github.run_attempt }}

  #   needs: get_version # Depends on Stage 1 for the tag to be used for the image. 

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     # Set up Docker
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     # Log in to AWS ECR
  #     - name: Log in to Amazon ECR
  #       uses: aws-actions/amazon-ecr-login@v1
      
  #     # Build and push the Image
  #     - name: Build and push Docker image to ECR
  #       env:
  #         IMAGE_TAG: ${{ needs.get_version.outputs.image_tag }}
  #       run: |
  #         docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .
  #         docker push ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

  
  # update_version: # Stage 3 - Updates the Version in the default variables file and pushes a commit to GIT. 
  #   runs-on: 
  #     - codebuild-image-builder-${{ github.run_id }}-${{ github.run_attempt }}
    
  #   needs: ["get_version", "build_and_push"] # Depends on Stage 1, 2 for the default variables file. 

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Update image version in k8s manifests
  #       id: bump-version
  #       env:
  #         IMAGE_TAG: ${{ needs.get_version.outputs.image_tag }}
  #       run: |
  #         sed -i "s/\(container_image = \"671415945235.dkr.ecr.us-east-1.amazonaws.com\/blockchain-analyzer:\)[^\"]*/\1$IMAGE_TAG/" terraform/terraform.tfvars
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git add .
  #         git commit -m "Update image to $IMAGE_TAG"
  #         git push

  # terraform:  # Stage 4 - Runs the terraform to deploy the application in AWS Account. 
  #   runs-on: 
  #     - codebuild-image-builder-${{ github.run_id }}-${{ github.run_attempt }}

  #   defaults:
  #     run:
  #       working-directory: terraform

  #   needs: ["update_version"] # Depends on Stage 3 to run the terraform with latest image tag. 

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: main
  #         fetch-depth: 0

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.8.0

  #     - name: Terraform Init
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform init

  #     - name: Terraform Plan
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform plan
      
  #     - name: Terraform Apply
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform apply --auto-approve